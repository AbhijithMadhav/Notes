<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head><body>
<h2>CS 213/293: Data Structures and Algorithms + Lab (Autumn 2010) </h2>

<b>Schedule</b>: Lectures: Slot 4 in SIC 301 Kresit, Lab:  Tue 2-5 in OSL<br>
<b>Instructor:</b> <a href="http://www.cse.iitb.ac.in/%7Edamani">Om Damani</a>, <b> Office hours</b>: M,Thu 5-6
<br>
<b>TA list:</b> cs213-tas 
<!-- <B>TA office hours </B> M,Thu 6-7 (by appointment only in NSL) -->
<br>
<a href="http://moodle.iitb.ac.in/course/view.php?id=832"> <b> Moodle </b> </a>: Slides, Assignments, Solution, Newsgroup etc.
<br>
<br>
<a name="eligi"> <b>Credit/Audit Eligibility</b></a>: This is a second year core course and cannot be taken as elective by anyone else.
<a name="requirements"> <br>

<!-- <b>Audit Requirements</b></a>:
You have to do at least 80% of the programming assignments. There will be one assignment per week.
-->

</a><h3><a name="requirements">Text Book</a></h3>
<!-- Following text-books are available in Indian edition. 
<p>
[SS] Data Structures, Algorithms and Applications in C++, Sartaj Sahni, 2nd Ed. <br>
-->
<a name="requirements">[RS] Algorithms in C++, Robert Sedgewick, 3rd Ed.
<br>
<!--
<h4> Supplementary books </h4>
Following book is not available in Indian edition. The instructor will be providing slides for some topics
from this book:
<p>
[FC] Data Abstraction and Problem Solving with C++, Frank M. Carrano, 5th Ed. <br>
-->
</a><h4><a name="requirements"> Suggested Readings</a></h4>
<a name="requirements">Unix Programming Environment by Brian W. Kernighan, Rob Pike.<br>

</a><h3><a name="requirements">Lectures</a></h3>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="background-color: gray;">
<th width="15%"> Sr. No, Date
</th>
<th width="45%">Topic</th>
<th>Resource</th>
</tr>

<tr> 	

<td> <b>1</b>: 22/07</td> 
	<td> Administrative Details, Motivation </td>
	<td> Slides</td>
</tr>

<tr><td> <b>2</b>: 26/07</td> 
	<td> Object Based Programming: C++ Classes </td>
	<td> Slides, Ch 4.1,4.5, 4.8,4.9</td>
</tr>

<tr><td> <b>3</b>: 27/07</td> 
	<td> Data Structures in Real Life, <br>
   How to implement a search engine </td>
	<td> Slides</td>
</tr>

<tr><td> <b>4</b>: 29/07</td> 
	<td> Performance Analysis </td>
	<td> Slides, Ch 2.2</td>
</tr>

<tr><td> <b>5</b>: 02/08</td> 
	<td> Performance Analysis </td>
	<td> Slides based on Ch. 2.3-2.6 </td>
</tr>

<tr> 	<td> <b>6</b>: 03/08</td> 
	<td> Motivating Link Lists: implementing Dynamic Sets using arrays, problems:
a) deletion, b) maintaining it in sorted fashion. </td>
	<td> Slides </td>
</tr>

<tr> 	<td> <b>7</b>: 05/08</td> 
	<td> Dynamic Memory Allocation: Pointers </td>
	<td> Slides </td>
</tr>

<tr> 	<td> <b>8</b>: 09/08</td> 
	<td> Link List Implementation using Pointers </td>
	<td> Slides, Ch 3.3-3.5 </td>
</tr>

<tr> 	<td> <b>9</b>: 10/08</td> 
	<td> Queue, Applications </td>
	<td> Ch 4.6 </td>
</tr>

<tr> 	<td> <b>10</b>: 12/08</td> 
	<td> Stack, Applications </td>
	<td> Ch 4.2-4.4 </td>
</tr>

<tr> 	<td> <b>11</b>: 12/08</td> 
	<td> Extra Tutorial: HW and Lab Solutions </td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>12</b>: 16/08</td> 
	<td> Recursion: examples, Towers of Hanoi </td>
	<td> Ch 5.1-5.3 </td>
</tr>

<tr> 	<td> <b>13</b>: 17/08</td> 
	<td> Iterative solution to Hanoi, other examples of recursion </td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>14</b>: 19/08</td> 
	<td> Queue implementation using Arrays</td>
	<td> Slides </td>
</tr>

<tr> 	<td> <b>15</b>: 23/08</td> 
	<td> Insertion Sort</td>
	<td> Ch 6.1,6.3 </td>
</tr>

<tr> 	<td> <b>16</b>: 26/08</td> 
	<td> Selection Sort </td>
	<td> Ch 6.2 </td>
</tr>

<tr> 	<td> <b>17</b>: 30/08</td> 
	<td> Selection Sort - Exact Analysis </td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>18</b>: 31/08</td> 
	<td> Merge Sort </td>
	<td> Ch 8.1-8.3,8.5-8.7 </td>
</tr>

<tr> 	<td> <b>19</b>: 02/09</td> 
	<td> Quick Sort, Partitioning Algorithm </td>
	<td> Ch 7.1, pages 12-15 of <a href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD398.PDF">Sequencing Primitives Revisited</a> for Dijkstra's Dutch National Flag Problem that introduced the 3-way, in-place partition </td>
</tr>

<tr> 	<td> <b>20</b>: 06/09</td> 
	<td> Quick Sort: Avg Case Analysis, Optimizations </td>
	<td> Ch 7.2,7.4-7.6 </td>
</tr>

<tr> 	<td> <b>21</b>: 07/09</td> 
	<td> Quick Sort: Recursion Removal </td>
	<td> Ch 7.3 </td>
</tr>

<tr> 	<td> <b>22</b>: 20/09</td> 
	<td> Trees: Formal Definition and Properties </td>
	<td> Ch 5.4-5.5 </td>
</tr>

<tr> 	<td> <b>23</b>: 21/09</td> 
	<td> Trees: Traversal Algorithms </td>
	<td> Ch 5.6-5.7 </td>
</tr>

<tr> 	<td> <b>24</b>: 23/09</td> 
	<td> Priority Queue </td>
	<td> Ch 9.1-9.3 </td>
</tr>

<tr> 	<td> <b>25</b>: 27/09</td> 
	<td> Heapsort </td>
	<td> Ch 9.4 </td>
</tr>

<tr> 	<td> <b>26</b>: 28/09</td> 
	<td> Priority Queue Application: Discrete Event Simulation </td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>27</b>: 30/09</td> 
	<td> Binary Search Trees: Insertion, Deletion, and Join  </td>
	<td> 12.5-12.7 </td>
</tr>

<tr> 	<td> <b>28</b>: 04/10</td> 
	<td> BST: Rotation, Root Insertion, Randomized BST  </td>
	<td> 12.8-12.9, 13.1 </td>
</tr>

<tr> 	<td> <b>29</b>: 05/10</td> 
	<td> 2-4 Trees  </td>
	<td> 13.3, Slides in Moodle </td>
</tr>

<tr> 	<td> <b>30</b>: 07/10</td> 
	<td> Splay Trees  </td>
	<td> 13.2, the classical <a href="http://portal.acm.org/citation.cfm?id=3835">paper</a> by Sleator and Tarjan. A demo can be found <a href="http://www.link.cs.cmu.edu/splay/"> here.</a> </td>
</tr>

<tr> 	<td> <b>31</b>: 11/10</td> 
	<td> Skip Lists  </td>
	<td> 13.5 </td>
</tr>

<!--
<tr> 	<td> <b>2,3</b>: 27,28/07</td> 
	<td> Union-Find Algorithms</td>
	<td> [RS].1, Slides-[RS]</td.
</tr>

<tr> 	<td> <b>4</b>: 30/07</td> 
	<td> Complexity Analysis and Recurrence Relations</td>
	<td> [RS].2, [SS].3, Slides-Om</td>
</tr>

<tr> 	<td> <b>6</b>: 04/08</td> 
	<td> Insertion Sort, Selction Sort. Applying Link Lists: Bucket Sort</td>
	<td> [SS].6.1,6.5.1</td>
</tr>

<tr> 	<td> <b>7</b>: 06/08</td> 
	<td> Assignment 2 solution</td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>8</b>: 06/08 (evening)</td> 
	<td> Link List Implementation</td>
	<td> Slides-[FC]</td>
</tr>

<tr> 	<td> <b>9</b>: 10/08 </td> 
	<td> Abstract Data Types</td>
	<td> Slides-[FC]</td>
</tr>

<tr> 	<td> <b>10</b>: 11/08 </td> 
	<td> Link List Continued </td>
	<td> Slides-[FC]</td>
</tr>

<tr> 	<td> <b> </b> 13-19/08 </td> 
	<td> Swine Flu Break</td>
	<td>  &nbsp;  </td>
</tr>

<tr> 	<td> <b>11</b>: 20/08 (morn + even)</td> 
	<td> Quiz, Prog. Assignment 4 Discussion</td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>12</b>: 24/08 </td> 
	<td> Writing Bug Free code, using a debugger</td>
	<td> gdb </td>
</tr>

<tr> 	<td> <b>13</b>: 25/08 </td> 
	<td> Stack, Solving Algebraic Expressions</td>
	<td> [SS].8.1, 8.2, 8.3, 8.5.2, 8.5.6 <br>
	<i> Historic Notes </i> <a href="http://www.cs.utexas.edu/~EWD/ewd00xx/EWD28.PDF"> Dijkstra discusses this problem in 1962 </a>, <a href="ewdStack.html"> a html version of the same </a> </td>
</tr>

<tr> 	<td> <b>14</b>: 27/08 </td> 
	<td> Implementation choices for Stack, Removing Recursion using Stack</td>
	<td> From a text-book by Langsam </td>
</tr>

<tr> 	<td> <b>15</b>: 28/08 </td> 
	<td> Repeat Lecture on Removing Recursion using Stack</td>
	<td> &nbsp; </td>
</tr>

<tr> 	<td> <b>16</b>: 31/08 </td> 
	<td> ADT Queue and its applications</td>
	<td> [RS].8.7, [SS].9.1,9.2,9.5. Instead of [SS].9.5, various other applications discussed in class. </td>
</tr>

<tr> 	<td> <b>17</b>: 01/09 </td> 
	<td> Queue Implementation Issues, circular array based implementation</td>
	<td> From Carrano </td>
</tr>

<tr> 	<td> <b>18</b>: 03/09 </td> 
	<td> Hashing: ADT, Applications, Implementation - Chaining</td>
	<td> [SS] 10.5-10.6.5, [RS] 14.0 Our discussion follows [RS]  </td> 
</tr>

<tr> 	<td> <b>19</b>: 07/09 </td> 
	<td> Hash function for various data types: float, string.</td>
	<td> [RS] 14.1-.2  </td> 
</tr>

<tr> 	<td> <b>20</b>: 08/09 </td> 
	<td> Linear Probing: Motivation, Implementation, Properties</td>
	<td> [RS] 14.3  </td> 
</tr>

<tr> 	<td> <b>21</b>: 09/09 </td> 
	<td> Clustering. Double Hashing. Analysis. Random Probing. Real Life Issues.</td>
	<td> [RS] 14.4-6. Note that this material is not covered in [SS] </td> 
</tr>

<tr> 	<td> <b>22</b>: 22/09 </td> 
	<td> A simple sorting algorithm from basic specification and its analysis</td>
	<td>  </td> 
</tr>


<tr> 	<td> <b>23</b>: 23/09 </td> 
	<td> QuickSort, Partition method from basic specification </td>
	<td> [RS] 7.1; Check the pages 12-15 of <a href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD398.PDF">Sequencing Primitives Revisited</a> for Dijkstra's Dutch National Flag Problem that introduced the 3-way, in-place partition.  </td> 
</tr>


<tr> 	<td> <b>24</b>: 29/09 </td> 
	<td> QuickSort Analysis</td>
	<td> [RS] 7.2, Average case intution based on CLR  </td> 
</tr>


<tr> 	<td> <b>25</b>: 30/09 </td> 
	<td> Trees, Basic Recursive Definition, Properties</td>
	<td> [RS] 5.4, 5.5  </td> 
</tr>


<tr> 	<td> <b>26</b>: 01/10 </td> 
	<td> Tree Traversal, Complete Binary Tree, Priority Queue ADT and Implementation, Heap and Array Based Implementation</td>
	<td> [RS] 9.1-9.3,9.5  </td> 
</tr>


<tr> 	<td> <b>27</b>: 05/10 </td> 
	<td> Optimizing N consecutive insertions in Heap</td>
	<td> [RS] 9.4  </td> 
</tr>

<tr> 	<td> <b>28</b>: 06/10 </td> 
	<td> Pointer Based Heap - various methods, removing complete binary tree condition</td>
	<td> In Moodle: A formal description of Optimal Binary Tree and the insertion code for pointer based heap.</td> 
</tr>

<tr> 	<td> <b>29</b>: 08/10 </td> 
	<td> Binary Search Tree: Definition, Insert, Search </td>
	<td> [RS] 12.5, [SS] 14.1-14.3 </td>
</tr>

<tr> 	<td> <b>30</b>: 12/10 </td> 
	<td> Binary Search Tree: Analysis of Avergae Search Cost, Deletion, Merge </td>
	<td> [RS] 12.6, 12.9, [SS] 14.3, Lecture Notes in Moodle </td>
</tr>

<tr> 	<td> <b>31</b>: 20/10 </td> 
	<td> Rotation and Height Balanced Binary Search Trees: Randomized BSTs and Treap </td>
	<td> [RS] 13.1, not given in [SS],   Slides based on Sedgewick in Moodle </td>
</tr>

<tr> 	<td> <b>32</b>: 22/10 </td> 
	<td> 2-3-4 Tree </td>
	<td> [RS] 13.3, not given in [SS], we discussed bottom-up approach as per a book by Goodrich/Tamassia, as opposed to top-down approach given in Sedgewick.  Slides by Goodrich/Tamassia in Moodle </td>
</tr>

<tr> 	<td> <b>33</b>: 26/10 </td> 
	<td> Red-Black Tree: Basic properties, insertion. Allows red link in 3-node to be either left or right child. </td>
	<td> [RS] 13.4, [SS] 15.2, our discussion based on the book by Goodrich/Tamassia.  Slides by Goodrich/Tamassia in Moodle. It will be hard to follow Red-Black Tree without understanding 2-3-4 Tree first. </td>
</tr>

<tr> 	<td> <b>34</b>: 27/10 </td> 
	<td> Search Structures for Strings: Tries, Ternary Search Trees </td>
	<td> [RS] 15.2,15.4. Slides by Sedgewick in Moodle. </td>
</tr>

<tr> 	<td> <b>35</b>: 28/10 </td> 
	<td> KD-Tree: Search Structure for multi-dimensional data </td>
	<td> Writeup by Sedgewick is part of assignment 10.</td>
</tr>

<tr> 	<td> <b>36</b>: 29/10 </td> 
	<td> Left Leaning Red-Black Tree: Red link in 3-node can be only left child. Split all 4 nodes.</td>
	<td> Slides by Sedgewick in Moodle. </td>
</tr>

<tr> 	<td> <b>37</b>: 03/11 </td> 
	<td> Left Leaning Red-Black Tree: Do not split 4 nodes</td>
	<td> </td>
</tr>

<tr> 	<td> <b>38</b>: 05/11 </td> 
	<td> Graphs: Basic Definitions and Properties</td>
	<td> [SS] 16.1-16.3</td>
</tr>

<tr> 	<td> <b>39</b>: 09/11 </td> 
	<td> Unweighted Graphs: Finding a path between given set of points/DFS</td>
	<td> [SS] 16.8-16.9, our discussion was inspired by Kleinberg-Tardos's Algorithm's book</td>
</tr>

<tr> 	<td> <b>40</b>: 10/11 </td> 
	<td> Unweighted Graphs: Finding the shortest path between given set of points/BFS; properties of BFS/DFS tree</td>
	<td> [SS] 16.8-16.9, our discussion was inspired by Kleinberg-Tardos's Algorithm's book</td>
</tr>

<tr> 	<td> <b>41</b>: 12/11 </td> 
	<td> Weighted Graphs: Shortest path - Dijkstra's Algorithm</td>
	<td> [SS] 16.8-16.9, our discussion was inspired by Kleinberg-Tardos's Algorithm's book</td>
</tr>

<tr> 	<td> <b>42</b>: 12/11 </td> 
	<td> Generic Graph Traversal using various data-structures</td>
	<td> Our discussion was inspired by Kleinberg-Tardos's Algorithm's book</td>
</tr>

<tr> 	<td> <b>43</b>: 12/11 </td> 
	<td> Discussion session on Minimal Spanning Tree, Topological Sorting, Bi-partite Graphs</td>
	<td> [SS]16.9 for MST. Our MST discussion was inspired by Kleinberg/Tardos. Other topics from other places.</td>
</tr>

-->

</tbody></table></body></html>